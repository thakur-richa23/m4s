"use strict";
///<reference path='./google.ima.ts'/>
var core_1 = require('@angular/core');
var vg_api_1 = require('../core/services/vg-api');
var vg_events_1 = require('../core/events/vg-events');
var vg_fullscreen_api_1 = require('../core/services/vg-fullscreen-api');
var VgImaAds = (function () {
    function VgImaAds(ref, API, fsAPI) {
        this.API = API;
        this.fsAPI = fsAPI;
        this.isFullscreen = false;
        this.subscriptions = [];
        this.displayState = 'none';
        this.elem = ref.nativeElement;
        this.onContentEnded = this.onContentEnded.bind(this);
    }
    VgImaAds.prototype.ngOnInit = function () {
        var _this = this;
        if (this.API.isPlayerReady) {
            this.onPlayerReady();
        }
        else {
            this.subscriptions.push(this.API.playerReadyEvent.subscribe(function () { return _this.onPlayerReady(); }));
        }
    };
    VgImaAds.prototype.onPlayerReady = function () {
        if (typeof google === "undefined") {
            this.onMissingGoogleImaLoader();
            return;
        }
        this.target = this.API.getMediaById(this.vgFor);
        this.initializations();
        this.subscriptions.push(this.target.subscriptions.ended.subscribe(this.onContentEnded.bind(this)));
        this.subscriptions.push(this.target.subscriptions.play.subscribe(this.onUpdateState.bind(this)));
        this.subscriptions.push(this.fsAPI.onChangeFullscreen.subscribe(this.onChangeFullscreen.bind(this)));
        this.ima.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded.bind(this), false);
        this.ima.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this), false);
        this.loadAds();
    };
    VgImaAds.prototype.initializations = function () {
        var _this = this;
        this.ima = new Ima(this.elem);
        if (this.vgSkipButton) {
            this.skipButton = document.querySelector(this.vgSkipButton);
            this.skipButton.style.display = 'none';
            this.skipButton.addEventListener('click', this.onClickSkip.bind(this));
            this.elem.insertBefore(this.skipButton, this.elem.firstChild);
        }
        window.addEventListener('resize', function () {
            var w = _this.API.videogularElement.offsetWidth;
            var h = _this.API.videogularElement.offsetHeight;
            if (_this.ima.adsManager) {
                if (_this.isFullscreen) {
                    _this.ima.adsManager.resize(w, h, google.ima.ViewMode.FULLSCREEN);
                }
                else {
                    _this.ima.adsManager.resize(w, h, google.ima.ViewMode.NORMAL);
                }
            }
        });
    };
    VgImaAds.prototype.loadAds = function () {
        var _this = this;
        if (this.vgCompanion) {
            googletag.cmd.push(function () {
                var adUnitPath = '/' + _this.vgNetwork + '/' + _this.vgUnitPath;
                var slot = googletag.defineSlot(adUnitPath, _this.vgCompanionSize, _this.vgCompanion);
                if (slot) {
                    slot.addService(googletag.companionAds());
                    slot.addService(googletag.pubads());
                    googletag
                        .companionAds()
                        .setRefreshUnfilledSlots(true);
                    googletag
                        .pubads()
                        .enableVideoAds();
                    googletag.enableServices();
                }
            });
        }
    };
    VgImaAds.prototype.onUpdateState = function (event) {
        switch (event.type) {
            case vg_events_1.VgEvents.VG_PLAY:
                if (!this.ima.adsLoaded) {
                    this.API.pause();
                    this.ima.adDisplayContainer.initialize();
                    this.requestAds(this.vgAdTagUrl);
                    this.ima.adsLoaded = true;
                }
                break;
        }
    };
    VgImaAds.prototype.requestAds = function (adTagUrl) {
        // Show only to get computed style in pixels
        this.show();
        var adsRequest = new google.ima.AdsRequest();
        var computedStyle = window.getComputedStyle(this.elem);
        adsRequest.adTagUrl = adTagUrl;
        adsRequest.linearAdSlotWidth = parseInt(computedStyle.width, 10);
        adsRequest.linearAdSlotHeight = parseInt(computedStyle.height, 10);
        adsRequest.nonLinearAdSlotWidth = parseInt(computedStyle.width, 10);
        adsRequest.nonLinearAdSlotHeight = parseInt(computedStyle.height, 10);
        this.ima.adsLoader.requestAds(adsRequest);
    };
    VgImaAds.prototype.onAdsManagerLoaded = function (evt) {
        this.show();
        this.ima.adsManager = evt.getAdsManager(this.target);
        this.processAdsManager(this.ima.adsManager);
    };
    VgImaAds.prototype.processAdsManager = function (adsManager) {
        var w = this.API.videogularElement.offsetWidth;
        var h = this.API.videogularElement.offsetHeight;
        // Attach the pause/resume events.
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, this.onContentPauseRequested.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, this.onContentResumeRequested.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED, this.onSkippableStateChanged.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED, this.onAllAdsComplete.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, this.onAdComplete.bind(this), false);
        this.ima.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError.bind(this), false);
        this.ima.adsManager.init(w, h, google.ima.ViewMode.NORMAL);
        this.ima.adsManager.start();
    };
    VgImaAds.prototype.onSkippableStateChanged = function () {
        var isSkippable = this.ima.adsManager.getAdSkippableState();
        if (isSkippable) {
            this.skipButton.style.display = 'block';
        }
        else {
            this.skipButton.style.display = 'none';
        }
    };
    VgImaAds.prototype.onClickSkip = function () {
        this.ima.adsManager.skip();
    };
    VgImaAds.prototype.onContentPauseRequested = function () {
        this.show();
        this.API.pause();
    };
    VgImaAds.prototype.onContentResumeRequested = function () {
        this.API.play();
        this.hide();
    };
    VgImaAds.prototype.onAdError = function (evt) {
        if (this.ima.adsManager) {
            this.ima.adsManager.destroy();
        }
        this.hide();
        this.API.play();
    };
    VgImaAds.prototype.onAllAdsComplete = function () {
        this.hide();
        // The last ad was a post-roll
        if (this.ima.adsManager.getCuePoints().join().indexOf('-1') >= 0) {
            this.API.pause(); // it was stop() in Videogular v1
        }
    };
    VgImaAds.prototype.onAdComplete = function () {
        // TODO: Update view with current ad count
        this.ima.currentAd++;
    };
    VgImaAds.prototype.show = function () {
        window.dispatchEvent(new CustomEvent(vg_events_1.VgEvents.VG_START_ADS));
        this.displayState = 'block';
    };
    VgImaAds.prototype.hide = function () {
        window.dispatchEvent(new CustomEvent(vg_events_1.VgEvents.VG_END_ADS));
        this.displayState = 'none';
    };
    VgImaAds.prototype.onContentEnded = function () {
        this.ima.adsLoader.contentComplete();
    };
    VgImaAds.prototype.onChangeFullscreen = function (fsState) {
        if (!this.fsAPI.nativeFullscreen) {
            this.isFullscreen = fsState;
        }
    };
    VgImaAds.prototype.onMissingGoogleImaLoader = function () {
        this.hide();
        this.API.play();
    };
    VgImaAds.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    VgImaAds.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'vg-ima-ads',
                    encapsulation: core_1.ViewEncapsulation.None,
                    template: "<div class=\"vg-ima-ads\"></div>",
                    styles: ["\n        vg-ima-ads {\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            z-index: 300;\n        }\n        vg-ima-ads .vg-ima-ads {\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n        }\n    "]
                },] },
    ];
    /** @nocollapse */
    VgImaAds.ctorParameters = [
        { type: core_1.ElementRef, },
        { type: vg_api_1.VgAPI, },
        { type: vg_fullscreen_api_1.VgFullscreenAPI, },
    ];
    VgImaAds.propDecorators = {
        'vgFor': [{ type: core_1.Input },],
        'vgNetwork': [{ type: core_1.Input },],
        'vgUnitPath': [{ type: core_1.Input },],
        'vgCompanion': [{ type: core_1.Input },],
        'vgCompanionSize': [{ type: core_1.Input },],
        'vgAdTagUrl': [{ type: core_1.Input },],
        'vgSkipButton': [{ type: core_1.Input },],
        'displayState': [{ type: core_1.HostBinding, args: ['style.display',] },],
    };
    return VgImaAds;
}());
exports.VgImaAds = VgImaAds;
var Ima = (function () {
    function Ima(imaAdsElement) {
        this.adDisplayContainer = new google.ima.AdDisplayContainer(imaAdsElement);
        this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);
        this.adsManager = null;
        this.adsLoaded = false;
        this.currentAd = 0;
    }
    return Ima;
}());
exports.Ima = Ima;
//# sourceMappingURL=data:application/json;base64,