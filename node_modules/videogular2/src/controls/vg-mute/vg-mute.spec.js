"use strict";
var vg_mute_1 = require("./vg-mute");
var vg_api_1 = require("../../core/services/vg-api");
describe('Mute Button', function () {
    var mute;
    var ref;
    var api;
    beforeEach(function () {
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        api = new vg_api_1.VgAPI();
        api.medias = {
            main: {
                id: 'main',
                volume: 1
            },
            secondary: {
                id: 'secondary',
                volume: 0.5
            }
        };
        mute = new vg_mute_1.VgMute(ref, api);
    });
    it('Should get media by id on init', function () {
        spyOn(api, 'getMediaById').and.callFake(function () {
            return {
                volume: 1
            };
        });
        mute.vgFor = 'test';
        mute.onPlayerReady();
        expect(api.getMediaById).toHaveBeenCalledWith('test');
        expect(mute.currentVolume).toBe(1);
    });
    it('Should get volume for one media file', function () {
        api.medias = {
            main: {
                volume: 1
            }
        };
        mute.target = api;
        var volume = mute.getVolume();
        expect(volume).toBe(1);
    });
    describe('onClick (single media)', function () {
        it('should mute volume if current volume is different than 0', function () {
            api.medias = {
                main: {
                    volume: 0.75
                }
            };
            mute.target = api;
            mute.onClick();
            expect(mute.currentVolume).toBe(0.75);
            expect(api.volume).toEqual(0);
        });
        it('should unmute volume if current volume is 0', function () {
            api.medias = {
                main: {
                    volume: 0
                }
            };
            mute.target = api;
            mute.currentVolume = 0.75;
            mute.onClick();
            expect(api.volume).toEqual(0.75);
        });
    });
    describe('onClick (multiple medias)', function () {
        it('should mute volume if current volume is different than 0', function () {
            mute.target = api;
            mute.onClick();
            expect(mute.currentVolume).toBe(1);
            expect(api.volume).toEqual(0);
        });
        it('should unmute volume if current volume is 0', function () {
            api.medias = {
                main: {
                    id: 'main',
                    volume: 0
                },
                secondary: {
                    id: 'secondary',
                    volume: 0
                }
            };
            mute.target = api;
            mute.currentVolume = 0.75;
            mute.onClick();
            expect(api.volume).toEqual(0.75);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctbXV0ZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidmctbXV0ZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx3QkFBcUIsV0FBVyxDQUFDLENBQUE7QUFDakMsdUJBQW9CLDRCQUE0QixDQUFDLENBQUE7QUFHakQsUUFBUSxDQUFDLGFBQWEsRUFBRTtJQUNwQixJQUFJLElBQVcsQ0FBQztJQUNoQixJQUFJLEdBQWMsQ0FBQztJQUNuQixJQUFJLEdBQVMsQ0FBQztJQUVkLFVBQVUsQ0FBQztRQUNQLEdBQUcsR0FBRztZQUNGLGFBQWEsRUFBRTtnQkFDWCxZQUFZLEVBQUUsVUFBQyxJQUFJO29CQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCLENBQUM7YUFDSjtTQUNKLENBQUM7UUFFRixHQUFHLEdBQUcsSUFBSSxjQUFLLEVBQUUsQ0FBQztRQUNsQixHQUFHLENBQUMsTUFBTSxHQUFHO1lBQ1QsSUFBSSxFQUFFO2dCQUNGLEVBQUUsRUFBRSxNQUFNO2dCQUNWLE1BQU0sRUFBRSxDQUFDO2FBQ1o7WUFDRCxTQUFTLEVBQUU7Z0JBQ1AsRUFBRSxFQUFFLFdBQVc7Z0JBQ2YsTUFBTSxFQUFFLEdBQUc7YUFDZDtTQUNKLENBQUM7UUFHRixJQUFJLEdBQUcsSUFBSSxnQkFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtRQUNqQyxLQUFLLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7WUFDcEMsTUFBTSxDQUFDO2dCQUNILE1BQU0sRUFBRSxDQUFDO2FBQ1osQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7UUFDcEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBRXJCLE1BQU0sQ0FBQyxHQUFHLENBQUMsWUFB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IjtcbmltcG9ydCB7VmdBUEl9IGZyb20gXCIuLi8uLi9jb3JlL3NlcnZpY2VzL3ZnLWFwaVwiO1xuaW1wb3J0IHtFbGVtZW50UmVmfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5kZXNjcmliZSgnTXV0ZSBCdXR0b24nLCAoKSA9PiB7XG4gICAgbGV0IG11dGU6VmdNdXRlO1xuICAgIGxldCByZWY6RWxlbWVudFJlZjtcbiAgICBsZXQgYXBpOlZnQVBJO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHJlZiA9IHtcbiAgICAgICAgICAgIG5hdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBnZXRBdHRyaWJ1dGU6IChuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBhcGkgPSBuZXcgVmdBUEkoKTtcbiAgICAgICAgYXBpLm1lZGlhcyA9IHtcbiAgICAgICAgICAgIG1haW46IHtcbiAgICAgICAgICAgICAgICBpZDogJ21haW4nLFxuICAgICAgICAgICAgICAgIHZvbHVtZTogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlY29uZGFyeToge1xuICAgICAgICAgICAgICAgIGlkOiAnc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICB2b2x1bWU6IDAuNVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG5cbiAgICAgICAgbXV0ZSA9IG5ldyBWZ011dGUocmVmLCBhcGkpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBnZXQgbWVkaWEgYnkgaWQgb24gaW5pdCcsICgpID0+IHtcbiAgICAgICAgc3B5T24oYXBpLCAnZ2V0TWVkaWFCeUlkJykuYW5kLmNhbGxGYWtlKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdm9sdW1lOiAxXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICBtdXRlLnZnRm9yID0gJ3Rlc3QnO1xuICAgICAgICBtdXRlLm9uUGxheWVyUmVhZHkoKTtcblxuICAgICAgICBleHBlY3QoYXBpLmdldE1lZGlhQnlJZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3QnKTtcbiAgICAgICAgZXhwZWN0KG11dGUuY3VycmVudFZvbHVtZSkudG9CZSgxKTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgZ2V0IHZvbHVtZSBmb3Igb25lIG1lZGlhIGZpbGUnLCAoKSA9PiB7XG4gICAgICAgIGFwaS5tZWRpYXMgPSB7XG4gICAgICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICAgICAgdm9sdW1lOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgbXV0ZS50YXJnZXQgPSBhcGk7XG5cbiAgICAgICAgbGV0IHZvbHVtZSA9IG11dGUuZ2V0Vm9sdW1lKCk7XG5cbiAgICAgICAgZXhwZWN0KHZvbHVtZSkudG9CZSgxKTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdvbkNsaWNrIChzaW5nbGUgbWVkaWEpJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIG11dGUgdm9sdW1lIGlmIGN1cnJlbnQgdm9sdW1lIGlzIGRpZmZlcmVudCB0aGFuIDAnLCAoKSA9PiB7XG4gICAgICAgICAgICBhcGkubWVkaWFzID0ge1xuICAgICAgICAgICAgICAgIG1haW46IHtcbiAgICAgICAgICAgICAgICAgICAgdm9sdW1lOiAwLjc1XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbXV0ZS50YXJnZXQgPSBhcGk7XG5cbiAgICAgICAgICAgIG11dGUub25DbGljaygpO1xuXG4gICAgICAgICAgICBleHBlY3QobXV0ZS5jdXJyZW50Vm9sdW1lKS50b0JlKDAuNzUpO1xuICAgICAgICAgICAgZXhwZWN0KGFwaS52b2x1bWUpLnRvRXF1YWwoMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdW5tdXRlIHZvbHVtZSBpZiBjdXJyZW50IHZvbHVtZSBpcyAwJywgKCkgPT4ge1xuICAgICAgICAgICAgYXBpLm1lZGlhcyA9IHtcbiAgICAgICAgICAgICAgICBtYWluOiB7XG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZTogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIG11dGUudGFyZ2V0ID0gYXBpO1xuXG4gICAgICAgICAgICBtdXRlLmN1cnJlbnRWb2x1bWUgPSAwLjc1O1xuXG4gICAgICAgICAgICBtdXRlLm9uQ2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KGFwaS52b2x1bWUpLnRvRXF1YWwoMC43NSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ29uQ2xpY2sgKG11bHRpcGxlIG1lZGlhcyknLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgbXV0ZSB2b2x1bWUgaWYgY3VycmVudCB2b2x1bWUgaXMgZGlmZmVyZW50IHRoYW4gMCcsICgpID0+IHtcbiAgICAgICAgICAgIG11dGUudGFyZ2V0ID0gYXBpO1xuXG4gICAgICAgICAgICBtdXRlLm9uQ2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KG11dGUuY3VycmVudFZvbHVtZSkudG9CZSgxKTtcbiAgICAgICAgICAgIGV4cGVjdChhcGkudm9sdW1lKS50b0VxdWFsKDApO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIHVubXV0ZSB2b2x1bWUgaWYgY3VycmVudCB2b2x1bWUgaXMgMCcsICgpID0+IHtcbiAgICAgICAgICAgIGFwaS5tZWRpYXMgPSB7XG4gICAgICAgICAgICAgICAgbWFpbjoge1xuICAgICAgICAgICAgICAgICAgICBpZDogJ21haW4nLFxuICAgICAgICAgICAgICAgICAgICB2b2x1bWU6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeToge1xuICAgICAgICAgICAgICAgICAgICBpZDogJ3NlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgICAgIHZvbHVtZTogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIG11dGUudGFyZ2V0ID0gYXBpO1xuXG4gICAgICAgICAgICBtdXRlLmN1cnJlbnRWb2x1bWUgPSAwLjc1O1xuXG4gICAgICAgICAgICBtdXRlLm9uQ2xpY2soKTtcblxuICAgICAgICAgICAgZXhwZWN0KGFwaS52b2x1bWUpLnRvRXF1YWwoMC43NSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG5cbmludGVyZmFjZSBEZWNvcmF0b3JJbnZvY2F0aW9uIHtcbiAgdHlwZTogRnVuY3Rpb247XG4gIGFyZ3M/OiBhbnlbXTtcbn1cbiJdfQ==