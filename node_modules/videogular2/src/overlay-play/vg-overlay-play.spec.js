"use strict";
var vg_overlay_play_1 = require("./vg-overlay-play");
var vg_api_1 = require("../core/services/vg-api");
var vg_states_1 = require("../core/states/vg-states");
var vg_fullscreen_api_1 = require('../core/services/vg-fullscreen-api');
describe('Videogular Player', function () {
    var overlayPlay;
    var ref;
    var api;
    var fsAPI;
    var controlsHidden;
    beforeEach(function () {
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        controlsHidden = {
            isHidden: {
                subscribe: function () { }
            }
        };
        api = new vg_api_1.VgAPI();
        fsAPI = new vg_fullscreen_api_1.VgFullscreenAPI();
        overlayPlay = new vg_overlay_play_1.VgOverlayPlay(ref, api, fsAPI, controlsHidden);
    });
    it('Should get media by id on init', function () {
        spyOn(api, 'getMediaById').and.returnValue({
            subscriptions: {
                bufferDetected: { subscribe: jasmine.createSpy('bufferDetected') }
            }
        });
        overlayPlay.vgFor = 'test';
        overlayPlay.onPlayerReady();
        expect(api.getMediaById).toHaveBeenCalledWith('test');
        expect(overlayPlay.target.subscriptions.bufferDetected.subscribe).toHaveBeenCalled();
    });
    describe('onClick', function () {
        beforeEach(function () {
            overlayPlay.target = {
                play: function () { },
                pause: function () { }
            };
        });
        it('current state play should set target to pause', function () {
            spyOn(overlayPlay, 'getState').and.callFake(function () { return vg_states_1.VgStates.VG_PLAYING; });
            spyOn(overlayPlay.target, 'pause');
            overlayPlay.onClick();
            expect(overlayPlay.getState).toHaveBeenCalled();
            expect(overlayPlay.target.pause).toHaveBeenCalled();
        });
        it('current state pause should set target to play', function () {
            spyOn(overlayPlay, 'getState').and.callFake(function () { return vg_states_1.VgStates.VG_PAUSED; });
            spyOn(overlayPlay.target, 'play');
            overlayPlay.onClick();
            expect(overlayPlay.getState).toHaveBeenCalled();
            expect(overlayPlay.target.play).toHaveBeenCalled();
        });
    });
    describe('getState', function () {
        beforeEach(function () {
            overlayPlay.target = {
                state: null
            };
        });
        it('if only one state returns that state', function () {
            overlayPlay.target.state = vg_states_1.VgStates.VG_PAUSED;
            expect(overlayPlay.getState()).toEqual(vg_states_1.VgStates.VG_PAUSED);
        });
        it('if more than one target should return pause if all of them are pause', function () {
            overlayPlay.target.state = [
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED
            ];
            expect(overlayPlay.getState()).toEqual(vg_states_1.VgStates.VG_PAUSED);
        });
        it('if more than one target should return play if any of them is play', function () {
            overlayPlay.target.state = [
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PLAYING,
                vg_states_1.VgStates.VG_PAUSED,
                vg_states_1.VgStates.VG_PAUSED
            ];
            expect(overlayPlay.getState()).toEqual(vg_states_1.VgStates.VG_PLAYING);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,