"use strict";
var Observable_1 = require('rxjs/Observable');
var vg_cue_points_1 = require('./vg-cue-points');
require('rxjs/add/observable/fromEvent');
describe('Cue points', function () {
    var cuePoints;
    var ref;
    beforeEach(function () {
        ref = {
            nativeElement: document.createElement('div')
        };
        cuePoints = new vg_cue_points_1.VgCuePoints(ref);
    });
    it('Should handle onLoad event', function () {
        spyOn(Observable_1.Observable, 'fromEvent').and.callThrough();
        cuePoints.ngOnInit();
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(ref.nativeElement, 'load');
    });
    xit('Should handle onLoad event', function () {
        spyOn(Observable_1.Observable, 'fromEvent').and.callThrough();
        var event = {
            target: document.createElement('video')
        };
        var track = event.target.addTextTrack('captions', 'test');
        var cue = track.addCue(new TextTrackCue(1, 2, 'cue 1')); // Illegal Constructor
        cuePoints.onLoad(event);
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(cue, 'enter');
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledWith(cue, 'exit');
        expect(Observable_1.Observable.fromEvent).toHaveBeenCalledTimes(8);
    });
    it('Should handle onEnter event', function () {
        spyOn(cuePoints.onEnterCuePoint, 'next').and.callThrough();
        var event = {
            target: {}
        };
        cuePoints.onEnter(event);
        expect(cuePoints.onEnterCuePoint.next).toHaveBeenCalledWith(event.target);
    });
    it('Should handle onExit event', function () {
        spyOn(cuePoints.onExitCuePoint, 'next').and.callThrough();
        var event = {
            target: {}
        };
        cuePoints.onExit(event);
        expect(cuePoints.onExitCuePoint.next).toHaveBeenCalledWith(event.target);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmctY3VlLXBvaW50cy5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidmctY3VlLXBvaW50cy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSwyQkFBMkIsaUJBQWlCLENBQUMsQ0FBQTtBQUM3Qyw4QkFBNEIsaUJBQWlCLENBQUMsQ0FBQTtBQUU5QyxRQUFPLCtCQUErQixDQUFDLENBQUE7QUFFdkMsUUFBUSxDQUFDLFlBQVksRUFBRTtJQUNuQixJQUFJLFNBQXNCLENBQUM7SUFDM0IsSUFBSSxHQUFlLENBQUM7SUFFcEIsVUFBVSxDQUFDO1FBQ1AsR0FBRyxHQUFHO1lBQ0YsYUFBYSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1NBQy9DLENBQUM7UUFFRixTQUFTLEdBQUcsSUFBSSwyQkFBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRCQUE0QixFQUFFO1FBQzdCLEtBQUssQ0FBQyx1QkFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVqRCxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFckIsTUFBTSxDQUFDLHVCQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqRixDQUFDLENBQUMsQ0FBQztJQUVILEdBQUcsQ0FBQyw0QkFBNEIsRUFBRTtRQUM5QixLQUFLLENBQUMsdUJBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFakQsSUFBSSxLQUFLLEdBQUc7WUFDUixNQUFNLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7U0FDMUMsQ0FBQztRQUVGLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMxRCxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLHNCQUFzQjtRQUUvRSxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sQ0FBQyx1QkFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNoRSxNQUFNLENBQUMsdUJBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0QsTUFBTSxDQUFDLHVCQUFVLENBQUMsU0FBUyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkJBQTZCLEVBQUU7UUFDOUIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTNELElBQUksS0FBSyxHQUFHO1lBQ1IsTUFBTSxFQUFFLEVBQUU7U0FDYixDQUFDO1FBRUYsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV6QixNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNEJBQTRCLEVBQUU7UUFDN0IsS0FBSyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTFELElBQUksS0FBSyxHQUFHO1lBQ1IsTUFBTSxFQUFFLEVBQUU7U0FDYixDQUFDO1FBRUYsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgVmdDdWVQb2ludHMgfSBmcm9tICcuL3ZnLWN1ZS1wb2ludHMnO1xuXG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvZnJvbUV2ZW50JztcblxuZGVzY3JpYmUoJ0N1ZSBwb2ludHMnLCAoKSA9PiB7XG4gICAgbGV0IGN1ZVBvaW50czogVmdDdWVQb2ludHM7XG4gICAgbGV0IHJlZjogRWxlbWVudFJlZjtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICByZWYgPSB7XG4gICAgICAgICAgICBuYXRpdmVFbGVtZW50OiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICB9O1xuXG4gICAgICAgIGN1ZVBvaW50cyA9IG5ldyBWZ0N1ZVBvaW50cyhyZWYpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoYW5kbGUgb25Mb2FkIGV2ZW50JywgKCkgPT4ge1xuICAgICAgICBzcHlPbihPYnNlcnZhYmxlLCAnZnJvbUV2ZW50JykuYW5kLmNhbGxUaHJvdWdoKCk7XG5cbiAgICAgICAgY3VlUG9pbnRzLm5nT25Jbml0KCk7XG5cbiAgICAgICAgZXhwZWN0KE9ic2VydmFibGUuZnJvbUV2ZW50KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChyZWYubmF0aXZlRWxlbWVudCwgJ2xvYWQnKTtcbiAgICB9KTtcblxuICAgIHhpdCgnU2hvdWxkIGhhbmRsZSBvbkxvYWQgZXZlbnQnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKE9ic2VydmFibGUsICdmcm9tRXZlbnQnKS5hbmQuY2FsbFRocm91Z2goKTtcblxuICAgICAgICBsZXQgZXZlbnQgPSB7XG4gICAgICAgICAgICB0YXJnZXQ6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJylcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgdHJhY2sgPSBldmVudC50YXJnZXQuYWRkVGV4dFRyYWNrKCdjYXB0aW9ucycsICd0ZXN0Jyk7XG4gICAgICAgIGxldCBjdWUgPSB0cmFjay5hZGRDdWUobmV3IFRleHRUcmFja0N1ZSgxLCAyLCAnY3VlIDEnKSk7IC8vIElsbGVnYWwgQ29uc3RydWN0b3JcblxuICAgICAgICBjdWVQb2ludHMub25Mb2FkKGV2ZW50KTtcblxuICAgICAgICBleHBlY3QoT2JzZXJ2YWJsZS5mcm9tRXZlbnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGN1ZSwgJ2VudGVyJyk7XG4gICAgICAgIGV4cGVjdChPYnNlcnZhYmxlLmZyb21FdmVudCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY3VlLCAnZXhpdCcpO1xuICAgICAgICBleHBlY3QoT2JzZXJ2YWJsZS5mcm9tRXZlbnQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcyg4KTtcbiAgICB9KTtcblxuICAgIGl0KCdTaG91bGQgaGFuZGxlIG9uRW50ZXIgZXZlbnQnLCAoKSA9PiB7XG4gICAgICAgIHNweU9uKGN1ZVBvaW50cy5vbkVudGVyQ3VlUG9pbnQsICduZXh0JykuYW5kLmNhbGxUaHJvdWdoKCk7XG5cbiAgICAgICAgbGV0IGV2ZW50ID0ge1xuICAgICAgICAgICAgdGFyZ2V0OiB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIGN1ZVBvaW50cy5vbkVudGVyKGV2ZW50KTtcblxuICAgICAgICBleHBlY3QoY3VlUG9pbnRzLm9uRW50ZXJDdWVQb2ludC5uZXh0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChldmVudC50YXJnZXQpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nob3VsZCBoYW5kbGUgb25FeGl0IGV2ZW50JywgKCkgPT4ge1xuICAgICAgICBzcHlPbihjdWVQb2ludHMub25FeGl0Q3VlUG9pbnQsICduZXh0JykuYW5kLmNhbGxUaHJvdWdoKCk7XG5cbiAgICAgICAgbGV0IGV2ZW50ID0ge1xuICAgICAgICAgICAgdGFyZ2V0OiB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIGN1ZVBvaW50cy5vbkV4aXQoZXZlbnQpO1xuXG4gICAgICAgIGV4cGVjdChjdWVQb2ludHMub25FeGl0Q3VlUG9pbnQubmV4dCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXZlbnQudGFyZ2V0KTtcbiAgICB9KTtcbn0pO1xuXG5pbnRlcmZhY2UgRGVjb3JhdG9ySW52b2NhdGlvbiB7XG4gIHR5cGU6IEZ1bmN0aW9uO1xuICBhcmdzPzogYW55W107XG59XG4iXX0=